swagger: "2.0"
info:
  title: "Queue API for University of Utah College of Engineering"
  version: "1.0.0"
  description: "**The following endpoints/functionalities can be used in designing a TA queue for the UofU CoE.**\n\n NOTES:\n- To test endpoints using *Try it out*, you must first login using `login` (if you have not already done so on the website). Please remember to logout with `logout` when finished. **Logging out does not remove you from queues or take TAs off duty.**\n- You must be logged in as a TA to successfully use endpoints marked with *(TA)* or as an admin to use endpoints under *Admin*; otherwise endpoints are open to all users. Naturally, TAs and students can only operate on courses they are assigned to or enrolled in, respectively.\n- This system relies on CADE Active Directory LDAP for:\n-- user authentication\n-- user info (e.g. first/last name)\n"
  # termsOfService: "http://swagger.io/terms/"
  contact:
    email: "zz@eng.utah.edu"
  license:
    name: "GPL 3"
    url: "https://www.gnu.org/licenses/gpl-3.0.en.html"

host: "localhost"
basePath: "/api"
schemes:
- "http"

# THESE TWO DECLARATIONS AT THE GLOBAL LEVEL ARE SUPPOSED
# ELIMINATE THE NEED FOR THEM IN ALL THE POST PATHS. BUT
# DUE TO A BUG, SOMETIMES IT DOESN'T WORK.
# consumes:
#   - "application/x-www-form-urlencoded"
# produces:
#   - "application/json"

tags:
  - name: "Authentication"
    description: "Endpoint authentication"
  - name: "Admins"
    description: "Modifying the admins group"
  - name: "Courses"
    description: "Course functionalities"
  - name: "User"
    description: "User functionalities"
  - name: "Queue"
    description: "Queue functionalities"
  - name: "Stats"
    description: "Statistical functionalities"


paths:
  /login:
    post:
      summary: "Login a user"
      description: "Login a user with the specified username and password and get their info."
      tags:
        - "Authentication"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
      - name: "username"
        in: "formData"
        description: "username"
        type: "string"
        required: true
      - name: "password"
        in: "formData"
        description: "password"
        type: "string"
        format: "password"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              username:
                type: "string"
              first_name:
                type: "string"
              last_name:
                type: "string"
              authenticated:
                type: "boolean"
              is_admin:
                type: "boolean"
        401:
          description: "Username and/or password is incorrect"
          schema:
            $ref: '#/definitions/not_authenticated'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        422:
          description: "Missing username and/or password"
          schema:
            $ref: '#/definitions/not_authenticated'
        500:
          description: "Server-side error"
          schema:
            #$ref: '#/definitions/error'
  /logout:
    post:
      summary: "Logout a user"
      description: "Logout the user who sent the request."
      tags:
        - "Authentication"
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              authenticated:
                type: "boolean"
                example: false
              success:
                type: "string"
                example: "User logged out"
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'

  /admins:
    get:
      summary: "Get the usernames of all users in the admins group"
      description: "Get the usernames of all users in the admins group"
      tags:
      - "Admins"
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              authenticated:
                type: "boolean"
              username:
                type: "string"
              admin:
                type: "object"
                properties:
                  username:
                    type: "string"
                  full_name:
                    type: "string"
        401:
          description: "Not authenticated"
          schema:
            #$ref: '#/definitions/not_authenticated'
        403:
          description: "Forbidden"
          schema:
            #$ref: '#/definitions/error'
        405:
          description: "Invalid HTTP request method"
          schema:
            #$ref: '#/definitions/bad_method'
        500:
          description: "Server-side error"
          schema:
            #$ref: '#/definitions/error'

  /admins/{username}:
    post:
      summary: "Add a user to the admin group"
      description: "Add a user to the admin group"
      tags:
      - "Admins"
      parameters:
      - name: "username"
        in: "path"
        description: "username of user to add"
        type: "string"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              authenticated:
                type: "boolean"
              username:
                type: "string"
              success:
                type: "string"
        401:
          description: "Not authenticated"
          schema:
            #$ref: '#/definitions/not_authenticated'
        403:
          description: "Forbidden"
          schema:
            #$ref: '#/definitions/error'
        405:
          description: "Invalid HTTP request method"
          schema:
            #$ref: '#/definitions/bad_method'
        500:
          description: "Server-side error"
          schema:
            #$ref: '#/definitions/error'
    delete:
      summary: "Remove a user from the admin group"
      description: "Remove a user from the admin group"
      tags:
      - "Admins"
      parameters:
      - name: "username"
        in: "path"
        description: "username of user to remove"
        type: "string"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              authenticated:
                type: "boolean"
              username:
                type: "string"
              success:
                type: "string"
        401:
          description: "Not authenticated"
          schema:
            #$ref: '#/definitions/not_authenticated'
        403:
          description: "Forbidden"
          schema:
            #$ref: '#/definitions/error'
        405:
          description: "Invalid HTTP request method"
          schema:
            #$ref: '#/definitions/bad_method'
        500:
          description: "Server-side error"
          schema:
            #$ref: '#/definitions/error'


  /user/{username}:
    get:
      summary: "Get user info"
      description: "Get the specified user's info. Admins can get anyone's info. Other users are restricted to themselves"
      tags:
      - "User"
      parameters:
      - name: "username"
        in: "path"
        description: "username of student"
        type: "string"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              authenticated:
                type: "boolean"
              student_info:
                type: "object"
                properties:
                  username:
                    type: "string"
                  first_name:
                    type: "string"
                  last_name:
                    type: "string"
        401:
          description: "Unauthorized"
          schema:
            $ref: '#/definitions/not_authenticated'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/error'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'
    delete:
      summary: "Delete a user"
      description: "Delete a user and all their data. Must be an admin."
      tags:
      - "User"
      parameters:
      - name: "username"
        in: "path"
        description: "username of user to delete"
        type: "string"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              authenticated:
               	type: "boolean"
              student_info:
                type: "object"
                properties:
                  username:
                    type: "string"
                  first_name:
                    type: "string"
                  last_name:
                    type: "string"
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/error'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'

  /user/{username}/courses:
    get:
      summary: "Get courses a user is enrolled in."
      description: "Get all the courses the user has enrolled in, or is a TA for."
      tags:
        - "User"
      parameters:
      - name: "username"
        in: "path"
        description: "username"
        type: "string"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              authenticated:
                type: "boolean"
              student_courses:
                type: "array"
                items:
                  type: "string"
              ta_courses:
                type: "array"
                items:
                  type: "string"
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'
  /user/{username}/courses/{course_id}/{role}:
    post:
      summary: "Enroll user in a course as student or TA"
      description: "Enroll the user in the specified course with the specified access code (if required)."
      tags:
        - "User"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "username of student"
        type: "string"
        required: true
      - name: "course_id"
        in: "path"
        description: "The ID of the course"
        type: "integer"
        required: true
      - name: "role"
        in: "path"
        description: "role: student or ta"
        enum:
        - "student"
        - "ta"
        - "instructor"
        required: true
      - name: "acc_code"
        in: "formData"
        description: "access code if required by course"
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        422:
          description: "Missing course"
          schema:
            $ref: '#/definitions/error'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'
    delete:
      summary: "Unenroll user from a course"
      description: "Unenroll the user from the specified course."
      tags:
        - "User"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "username"
        type: "string"
        required: true
      - name: "course_id"
        in: "path"
        description: "The ID of the course"
        type: "string"
        required: true
      - name: "role"
        in: "path"
        description: "role: student or ta"
        enum:
        - "student"
        - "ta"
        - "instructor"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        422:
          description: "Missing course"
          schema:
            $ref: '#/definitions/error'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'

 
  /queue/{course_id}:
    get:
      summary: "Get a queue"
      description: "Get the queue state for the specified course including info regarding the TAs on duty, course announcements, and the TA time limit per student."
      tags:
        - "Queue"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
      - name: "course_id"
        in: "path"
        description: "The ID of the course"
        type: "integer"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              authenticated:
                type: "boolean"
              username:
                type: "string"
              success:
                type: "string"
              role:
                type: "string"
              course_name:
                type: "string"
              state:
                type: "string"
                enum: ["open", "closed", "frozen"]
                description: "open, closed, or frozen"
              time_lim:
                type: "integer"
                description: "TA time limit per student"
              cooldown:
                type: "integer"
              quest_public:
                type: "boolean"
              announcements:
                type: "array"
                items:
                  type: "object"
                  properties:
                    id:
                      type: "string"
                    announcement:
                      type: "string"
                    poster:
                      type: "string"
                      description: "full name of user who posted announcement"
                    tmstmp:
                      type: "string"
              TAs:
                type: "array"
                items:
                  type: "object"
                  properties:
                    username:
                      type: "string"
                    duration:
                      description: "time spent on duty"
                      type: "string"
                    full_name:
                      type: "string"
                    helping:
                      description: "username of student being helped; null if none"
                      type: "string"
              queue:
                type: "array"
                items:
                  type: "object"
                  properties:
                    username:
                      type: "string"
                    full_name:
                      type: "string"
                    question:
                      type: "string"
                    location:
                      type: "string"
              queue_length:
                type: "integer"
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        403:
          description: "Not enrolled/assigned to course"
          schema:
            $ref: '#/definitions/error'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        422:
          description: "Missing course"
          schema:
            $ref: '#/definitions/error'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'
  /queue/{course_id}/student:
    post:
      summary: "Enqueue user"
      description: "Enqueue the user with the specified question and location.\n**Requirements:**\n- user must be enrolled in the course as a student\n- course queue must be open"
      tags:
        - "Queue"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
      - name: "course_id"
        in: "path"
        description: "Course ID number"
        type: "integer"
        required: true
      - name: "question"
        in: "formData"
        description: "question/subject for TA"
        type: "string"
        required: true
      - name: "location"
        in: "formData"
        description: "location of student"
        type: "string"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        422:
          description: "Missing course, question, or location"
          schema:
            $ref: '#/definitions/error'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'
  /queue/{course_id}/student/{username}:
    delete:
      summary: "Dequeue a student"
      description: "Dequeue the specified student from the specified course queue. If the user is a TA for the course, dequeue the student from the course."
      tags:
        - "Queue"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
      - name: "course_id"
        in: "path"
        description: "Course ID number"
        type: "integer"
        required: true
      - name: "username"
        in: "path"
        description: "username of student to dequeue"
        type: "string"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        422:
          description: "Missing course (and/or username if TA)"
          schema:
            $ref: '#/definitions/error'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'

  /queue/{course_id}/student/{username}/help:
    post:
      summary: "Help a user (TA)"
      description: "Set the TA's status to helping the specified user in the specified course. A TA can only help one user at a time; a new user will override the current one. **The TA must be on duty in the specified course.**"
      tags:
        - "Queue"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
      - name: "course_id"
        in: "path"
        description: "The ID of the course"
        type: "integer"
        required: true
      - name: "username"
        in: "path"
        description: "username to help"
        type: "string"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        403:
          description: "Not TA for course"
          schema:
            $ref: '#/definitions/error'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        422:
          description: "Missing course and/or student"
          schema:
            $ref: '#/definitions/error'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'


  /queue/{course_id}/student/{username}/position:
    post:
      summary: "Changes a user's position in the queue"
      description: "Move the specified student one spot up or down in the specified course. **TAs can only move their own students, and students can only move themselves down**"
      tags:
        - "Queue"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
      - name: "course_id"
        in: "path"
        description: "The ID of the course"
        type: "integer"
        required: true
      - name: "student"
        in: "path"
        description: "username to move"
        type: "string"
        required: true
      - name: "direction"
        in: "formData"
        description: "Move spcified student up or down"
        type: "string"
        required: true
        enum:
          - "up"
          - "down"
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        422:
          description: "Missing course (and/or username if TA)"
          schema:
            $ref: '#/definitions/error'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'

  /queue/{course_id}/state:
    post:
      summary: "Change the state of a queue (TA)"
      description: "Open, close, or freeze the queue for the specified course."
      tags:
        - "Queue"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
      - name: "course_id"
        in: "path"
        description: "The ID of the course"
        type: "integer"
        required: true
      - name: "state"
        in: "formData"
        description: "State to change to queue to (open/closed/frozen)"
        type: "string"
        enum:
          - "open" 
          - "closed"
          - "frozen"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        403:
          description: "Not TA for course"
          schema:
            $ref: '#/definitions/error'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        422:
          description: "Missing course"
          schema:
            $ref: '#/definitions/error'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'
      
  /queue/{course_id}/settings:
    post:
      summary: "Change a setting in the queue"
      description: "Current queue settings are time_lim and cooldown. Set with the specified positive integer the maximum amount of time (minutes) for each setting. No time limit is assumed if it is not set. **The queue must be open.**"
      tags:
        - "Queue"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
      - name: "course_id"
        in: "path"
        description: "The ID of the course"
        type: "integer"
        required: true
      - name: "setting"
        in: "formData"
        description: "Setting to be changed"
        type: "string"
        required: true
        enum:
          - "time_lim"
          - "cooldown"
      - name: "time_lim"
        in: "formData"
        description: "time limit (minutes)"
        type: "integer"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        403:
          description: "Not TA for course"
          schema:
            $ref: '#/definitions/error'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        422:
          description: "Missing course or missing/incorrect time_lim"
          schema:
            $ref: '#/definitions/error'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'
  /queue/{course_id}/ta:
    post:
      summary: "Put TA on duty (TA) and free TA"
      description: "Put the TA on duty for the specified course.**The queue must be open.** In the TA is already on duty, this will free them."
      tags:
        - "Queue"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
      - name: "course_id"
        in: "path"
        description: "The ID of the course"
        type: "integer"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        403:
          description: "Not TA for course"
          schema:
            $ref: '#/definitions/error'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        422:
          description: "Missing course"
          schema:
            $ref: '#/definitions/error'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'
    delete:
      summary: "Take TA off duty (TA)"
      description: "Take the TA off duty for the specified course."
      tags:
        - "Queue"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
      - name: "course_id"
        in: "path"
        description: "The ID of the course"
        type: "integer"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        403:
          description: "Not TA for course"
          schema:
            $ref: '#/definitions/error'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        422:
          description: "Missing course"
          schema:
            $ref: '#/definitions/error'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'

  /queue/{course_id}/announcements:
    post:
      summary: "Post an announcement (TA)"
      description: "Post the specified announcement for the specified course."
      tags:
        - "Queue"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
      - name: "course_id"
        in: "path"
        description: "The ID of the course"
        type: "integer"
        required: true
      - name: "announcement"
        in: "formData"
        description: "announcement"
        type: "string"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        403:
          description: "Not TA for course"
          schema:
            $ref: '#/definitions/error'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        422:
          description: "Missing course and/or announcement"
          schema:
            $ref: '#/definitions/error'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'
  /queue/{course_id}/announcements/{id}:
    delete:
      summary: "Delete an announcement (TA)"
      description: "Delete the announcement for the specified course with the specified ID."
      tags:
        - "Queue"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
      - name: "course_id"
        in: "path"
        description: "The ID of the course"
        type: "integer"
        required: true
      - name: "id"
        in: "path"
        description: "ID of announcement to delete"
        type: "integer"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        403:
          description: "Not TA for course"
          schema:
            $ref: '#/definitions/error'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        422:
          description: "Missing course and/or announcement_id"
          schema:
            $ref: '#/definitions/error'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'


  /stats/course/{course}:
    get:
      summary: "Get statistics for a course"
      description: "Get statistics for the specified course including average wait/help times (seconds) and a total students helped daily log.<br><br>If no dates are specified, the returned info accounts for the entire history of the course. If `start_date` is specified, the returned info accounts from `start_date` (inclusive) to the present. If `start_date` and `end_date` are specified, the returned info accounts from `start_date` (inclusive) `to end_date` (exclusive)."
      tags:
        - "Stats"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
      - name: "course"
        in: "path"
        description: "full course name (e.g. CS 4400: Computer Systems)"
        type: "string"
        required: true
      - name: "start_date"
        in: "query"
        description: "queue entry date (yyyy-mm-dd) (inclusive)"
        type: "string"
      - name: "end_date"
        in: "query"
        description: "queue entry date (yyyy-mm-dd) (exclusive)"
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              authenticated:
                description: "true if logged in"
                type: "boolean"
              stats:
                description: "course queue statistics"
                type: "object"
                properties:
                  avg_wait_time:
                    description: "average wait time before being helped (seconds)"
                    type: "string"
                  stddev_wait_time:
                    description: "standard deviation of average wait time (seconds)"
                    type: "string"
                  avg_help_time:
                    description: "average time being helped by the TA (seconds)"
                    type: "string"
                  stddev_help_time:
                    description: "standard deviation of average help time (seconds)"
                    type: "string"
              usage:
                description: "daily total students helped counts (excluding zero counts)"
                type: "array"
                items:
                  type: "object"
                  properties:
                    date:
                      type: "string"
                    students_helped:
                      type: "integer"
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        403:
           description: "Not TA for course"
           schema:
             $ref: '#/definitions/error'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        422:
          description: "Missing course or missing/bad date"
          schema:
            $ref: '#/definitions/error'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'


  /courses:
    get:
      summary: "Get all courses"
      description: "Get all the courses that can be enrolled in (i.e. courses with queues). `all_courses` is a hashmap: the *keys* are course names (e.g. \"CS 4150: Algorithms\", represented below as `additionalProp#`) and the *values* are objects: an `acc_req` key with a boolean value indicating whether or not the course requires an access code to enroll."
      tags:
        - "Courses"
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              authenticated:
                type: "boolean"
              username:
                type: "string"
              admin:
                type: "boolean"
              all_courses:
                type: "object"
                description: "course name -> {attribute -> value}"
                additionalProperties:
                  type: "object"
                  properties:
                    acc_req:
                      type: "boolean"
                    course_id:
                      type: "integer"
                    description:
                      type: "string"
                    enabled:
                      type: "boolean"
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'
    post:
      summary: "Create a new course"
      description: "Create a new course with the specified info."
      tags:
        - "Courses"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
      - name: "course_name"
        in: "formData"
        description: "full course name (e.g. \"CS 5555: Intro to the Number Five\")"
        type: "string"
        required: true
      - name: "depart_pref"
        in: "formData"
        description: "department prefix (e.g. \"CS\" or \"ME\")"
        type: "string"
        required: true
      - name: "course_num"
        in: "formData"
        description: "course number (e.g. \"5555\")"
        type: "string"
        required: true
      - name: "description"
        in: "formData"
        description: "description of the course"
        type: "string"
        required: true
      - name: "acc_code"
        in: "formData"
        description: "access code to enroll (optional; 16 character max)"
        type: "string"
      - name: "enabled"
        in: "formData"
        description: "is course enabled"
        type: "boolean"
        required: true
      - name: "generic"
        in: "formData"
        description: "is course generic"
        type: "boolean"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        403:
          description: "Not admin"
          schema:
            $ref: '#/definitions/error'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        422:
          description: "Missing parameter"
          schema:
            $ref: '#/definitions/error'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'
  /courses/{course_id}:
    get:
      summary: "Get all settings for a course"
      description: "Get all the settings for a course (e.g. \"CS 4150: Algorithms"
      tags:
        - "Courses"
      parameters:
      - name: "course_id"
        in: "path"
        description: "The ID of the course"
        type: "integer"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              authenticated:
                type: "boolean"
              all_courses:
                type: "object"
                description: "hashmap: course name -> {access code required -> bool}"
                additionalProperties:
                  type: "object"
                  properties:
                    acc_req:
                      type: "boolean"
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        403:
          description: "Not admin"
          schema:
            $ref: '#/definitions/error'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'

    patch:
      summary: "Edit an existing course"
      description: "Edit an existing course. Only fields needing updates need to be sent."
      tags:
        - "Courses"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
      - name: "course_id"
        in: "path"
        description: "The ID of the course"
        type: "integer"
        required: true
      - name: "depart_pref"
        in: "formData"
        description: "department prefix (e.g. \"CS\" or \"ME\")"
        type: "string"
        required: false
      - name: "course_num"
        in: "formData"
        description: "course number (e.g. \"5555\")"
        type: "string"
        required: false
      - name: "description"
        in: "formData"
        description: "description of the course"
        type: "string"
        required: false
      - name: "acc_code"
        in: "formData"
        description: "access code to enroll (optional; 16 character max)"
        type: "string"
        required: false
      - name: "enabled"
        in: "formData"
        description: "is course enabled or not"
        type: "boolean"
        required: false
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        403:
          description: "Not admin"
          schema:
            $ref: '#/definitions/error'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        422:
          description: "Missing parameter"
          schema:
            $ref: '#/definitions/error'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'
    delete:
      summary: "Delete a course"
      description: "Delete the specifed course."
      tags:
        - "Courses"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
      - name: "course_id"
        in: "path"
        description: "The ID of the course"
        type: "integer"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        403:
          description: "Not admin"
          schema:
            $ref: '#/definitions/error'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        422:
          description: "Missing course"
          schema:
            $ref: '#/definitions/error'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'

  /courses/{course_id}/{role}:
    get:
      summary: "Get all users of type role for a course"
      description: "Get all the TAs for a course (e.g. \"CS 4150: Algorithms"
      tags:
        - "Courses"
      parameters:
      - name: "course_id"
        in: "path"
        description: "The ID of the course"
        type: "integer"
        required: true
      - name: "role"
        in: "path"
        description: "The role of the users to return"
        enum:
        - "instructors"
        - "ta"
        - "students"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              authenticated:
                type: "boolean"
              TAs:
                type: "object"
                description: "array: tas"
        401:
          description: "Not authenticated"
          schema:
            $ref: '#/definitions/not_authenticated'
        403:
          description: "Not admin"
          schema:
            $ref: '#/definitions/error'
        405:
          description: "Invalid HTTP request method"
          schema:
            $ref: '#/definitions/bad_method'
        500:
          description: "Server-side error"
          schema:
            $ref: '#/definitions/error'


definitions:
  success:
    description: "Many endpoints return this simple JSON structure upon a successful request."
    properties:
      authenticated:
        description: "true if logged in"
        type: "boolean"
      success:
        description: "the result of your request"
        type: "string"
  error:
    description: "Most endpoints return this JSON structure upon a failed request."
    properties:
    # CURRENTLY, I THINK authenticated IS ALWAYS TRUE WHEN THIS STRUCTURE IS RETURNED. CONSIDER STATING THIS HERE.
      authenticated:
        description: "true if logged in"
        type: "boolean"
      error:
        description: "what went wrong with your request"
        type: "string"
  not_authenticated:
    description: "This JSON structure indicates you have not logged in."
    properties:
      authenticated:
        description: "will always be 'false'"
        type: "boolean"
        example: "false"
  bad_method:
    description: "The HTTP request method is not allowed (e.g. using GET when POST is required)."
    properties:
    # IF WE ADD THIS, THERE IS NO NEED FOR THIS DEFINITION; JUST USE 'error'
      # authenticated:
      #   description: "true if user is logged in"
      #   type: "boolean"
      error:
        description: "what method(s) are allowed"
        type: "string"

# NOT SURE WHAT TO PUT FOR THESE

# Supported authentication methods are:
# -Basic authentication
# -API key (as a header or query parameter)
# -OAuth 2 common flows (implicit, password, application and access code)

# securityDefinitions:
#   BasicAuth:
#     type: basic

# THIS MIGHT GO IN EACH OPERATION
# security:
#   - BasicAuth: []
